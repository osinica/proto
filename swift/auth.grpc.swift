//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: proto/auth.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Auth_AuthServiceClient`, then call methods of this protocol to make API calls.
internal protocol Auth_AuthServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Auth_AuthServiceClientInterceptorFactoryProtocol? { get }

  func validate(
    _ request: Auth_ValidateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_ValidateRequest, Auth_ValidateResponse>
}

extension Auth_AuthServiceClientProtocol {
  internal var serviceName: String {
    return "auth.AuthService"
  }

  /// Unary call to Validate
  ///
  /// - Parameters:
  ///   - request: Request to send to Validate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validate(
    _ request: Auth_ValidateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_ValidateRequest, Auth_ValidateResponse> {
    return self.makeUnaryCall(
      path: Auth_AuthServiceClientMetadata.Methods.validate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Auth_AuthServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Auth_AuthServiceNIOClient")
internal final class Auth_AuthServiceClient: Auth_AuthServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Auth_AuthServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Auth_AuthServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the auth.AuthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auth_AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Auth_AuthServiceNIOClient: Auth_AuthServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Auth_AuthServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the auth.AuthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auth_AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Auth_AuthServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Auth_AuthServiceClientInterceptorFactoryProtocol? { get }

  func makeValidateCall(
    _ request: Auth_ValidateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auth_ValidateRequest, Auth_ValidateResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auth_AuthServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Auth_AuthServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Auth_AuthServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeValidateCall(
    _ request: Auth_ValidateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auth_ValidateRequest, Auth_ValidateResponse> {
    return self.makeAsyncUnaryCall(
      path: Auth_AuthServiceClientMetadata.Methods.validate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auth_AuthServiceAsyncClientProtocol {
  internal func validate(
    _ request: Auth_ValidateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Auth_ValidateResponse {
    return try await self.performAsyncUnaryCall(
      path: Auth_AuthServiceClientMetadata.Methods.validate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Auth_AuthServiceAsyncClient: Auth_AuthServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Auth_AuthServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auth_AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Auth_AuthServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'validate'.
  func makeValidateInterceptors() -> [ClientInterceptor<Auth_ValidateRequest, Auth_ValidateResponse>]
}

internal enum Auth_AuthServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AuthService",
    fullName: "auth.AuthService",
    methods: [
      Auth_AuthServiceClientMetadata.Methods.validate,
    ]
  )

  internal enum Methods {
    internal static let validate = GRPCMethodDescriptor(
      name: "Validate",
      path: "/auth.AuthService/Validate",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Auth_AuthServiceProvider: CallHandlerProvider {
  var interceptors: Auth_AuthServiceServerInterceptorFactoryProtocol? { get }

  func validate(request: Auth_ValidateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Auth_ValidateResponse>
}

extension Auth_AuthServiceProvider {
  internal var serviceName: Substring {
    return Auth_AuthServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Validate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_ValidateRequest>(),
        responseSerializer: ProtobufSerializer<Auth_ValidateResponse>(),
        interceptors: self.interceptors?.makeValidateInterceptors() ?? [],
        userFunction: self.validate(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Auth_AuthServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Auth_AuthServiceServerInterceptorFactoryProtocol? { get }

  func validate(
    request: Auth_ValidateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auth_ValidateResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auth_AuthServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Auth_AuthServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Auth_AuthServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Auth_AuthServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Validate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_ValidateRequest>(),
        responseSerializer: ProtobufSerializer<Auth_ValidateResponse>(),
        interceptors: self.interceptors?.makeValidateInterceptors() ?? [],
        wrapping: { try await self.validate(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Auth_AuthServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'validate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidateInterceptors() -> [ServerInterceptor<Auth_ValidateRequest, Auth_ValidateResponse>]
}

internal enum Auth_AuthServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AuthService",
    fullName: "auth.AuthService",
    methods: [
      Auth_AuthServiceServerMetadata.Methods.validate,
    ]
  )

  internal enum Methods {
    internal static let validate = GRPCMethodDescriptor(
      name: "Validate",
      path: "/auth.AuthService/Validate",
      type: GRPCCallType.unary
    )
  }
}
